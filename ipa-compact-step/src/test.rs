left: "impl ipa_core :: protocol :: step :: Step for ManyArms { } impl AsRef < str > for ManyArms { fn as_ref (& self) -> & str { const INT_NAMES : [& str ; 3usize] = [\"int0\" , \"int1\" , \"int2\"] ; match self { Self :: Empty => \"empty\" , Self :: Int (& i) => INT_NAMES [usize :: try_from (i) . unwrap ()] , } } }"
ight: "impl ipa_core :: protocol :: step :: Step for ManyArms { } impl AsRef < str > for ManyArms { fn as_ref (& self) -> & str { const ARM_NAMES : [& str ; 3usize] = [\"arm0\" , \"arm1\" , \"arm2\"] ; match self { Self :: Empty => \"empty\" , Self :: Arm (& i) => ARM_NAMES [usize :: try_from (i) . unwrap ()] , } } }"